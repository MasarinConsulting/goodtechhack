"use strict"; L.FogLayer = (L.Layer ? L.Layer : L.Class).extend({ initialize: function (t, a) { this._latlngs = t, L.setOptions(this, a) }, setLatLngs: function (t) { return this._latlngs = t, this.redraw() }, addLatLng: function (t) { return this._latlngs.push(t), this._redraw() }, addCurrentLatLng: function (t) { return this._currentlatlng = t, this._redraw() }, redraw: function () { return !this._fog || this._frame || this._map._animating || (this._frame = L.Util.requestAnimFrame(this._redraw, this)), this }, addTo: function (t) { return t.addLayer(this), this }, onAdd: function (t) { this._map = t, this._canvas || this._initCanvas(), t._panes.overlayPane.appendChild(this._canvas), t.on("moveend", this._reset, this), t.options.zoomAnimation && L.Browser.any3d && t.on("zoomanim", this._animateZoom, this), this._reset() }, onRemove: function (t) { t.getPanes().overlayPane.removeChild(this._canvas), t.off("moveend", this._reset, this), t.options.zoomAnimation && t.off("zoomanim", this._animateZoom, this) }, _initCanvas: function () { var t = this._canvas = L.DomUtil.create("canvas", "leaflet-fog-layer leaflet-layer"), a = L.DomUtil.testProp(["transformOrigin", "WebkitTransformOrigin", "msTransformOrigin"]); t.style[a] = "50% 50%"; var i = this._map.getSize(); t.width = i.x, t.height = i.y; var n = this._map.options.zoomAnimation && L.Browser.any3d; L.DomUtil.addClass(t, "leaflet-zoom-" + (n ? "animated" : "hide")) }, _reset: function () { var t = this._map.containerPointToLayerPoint([0, 0]); L.DomUtil.setPosition(this._canvas, t), this._redraw() }, _redraw: function () { console.time("_redraw"); var t, a = this._map.getSize(), i = 100, n = this._canvas.getContext("2d"); n.globalCompositeOperation = "source-over"; var e = this._map.getBounds(), s = e._northEast.distanceTo(e._southWest), o = Math.sqrt(Math.pow(a.x, 2) + Math.pow(a.y, 2)); i = Math.round(i * o / s); var r = this.getPattern(i), h = new L.Bounds(L.point([-i / 2, -i / 2]), a.add([i / 2, i / 2])); n.clearRect(0, 0, this._canvas.width, this._canvas.height); for (var l = 0, m = this._latlngs.length; m > l; l++)t = this._map.latLngToContainerPoint(this._latlngs[l]), h.contains(t) && n.drawImage(r, t.x - i / 2, t.y - i / 2); n.globalCompositeOperation = "source-in", n.fillStyle = "rgba(0, 0, 0, 0.8)", n.fillRect(0, 0, this._canvas.width, this._canvas.height), n.globalCompositeOperation = "source-over", this._currentlatlng && (t = this._map.latLngToContainerPoint(this._currentlatlng), h.contains(t) && n.drawImage(r, t.x - i / 2, t.y - i / 2)), n.globalCompositeOperation = "xor", n.fillStyle = "rgba(0, 0, 0, 1.0)", n.fillRect(0, 0, this._canvas.width, this._canvas.height), console.timeEnd("_redraw") }, getPattern: function (t) { var a = document.createElement("canvas"); a.width = t, a.height = t; var i = a.getContext("2d"), n = Math.round(t / 5), e = t - 2 * n, s = 10; i.lineJoin = "round", i.lineWidth = s; var o = n, r = 0, h = e, l = t; return o = 0, r = 0, h = t, l = t, i.strokeRect(o + s / 2, r + s / 2, h - s, l - s), i.fillRect(o + s, r + s, h - 2 * s, l - 2 * s), a }, _animateZoom: function (t) { var a = this._map.getZoomScale(t.zoom), i = this._map._getCenterOffset(t.center)._multiplyBy(-a).subtract(this._map._getMapPanePos()); L.DomUtil.setTransform ? L.DomUtil.setTransform(this._canvas, i, a) : this._canvas.style[L.DomUtil.TRANSFORM] = L.DomUtil.getTranslateString(i) + " scale(" + a + ")" } }), L.fogLayer = function (t, a) { return new L.FogLayer(t, a) };
